@inherits Umbraco.Web.Mvc.UmbracoViewPage<ContentModels.Home>
@using ContentModels = Umbraco.Web.PublishedModels;
@using RezervistUmbraco.ViewModels;
@using RezervistUmbraco.Models;
@using RezervistUmbraco.Controllers;
@{
    Layout = "master.cshtml";

    var currentLang = System.Threading.Thread.CurrentThread.CurrentCulture.TwoLetterISOLanguageName;
    var btn = Umbraco.Content(Guid.Parse("97773cf2-cb91-463e-84ea-97ccdab7f684"));
}
@section Title{
    <title>Rezervist | @Model.Value("title")</title>
}
@section Meta {
    @Html.Partial("_MetaTagsPartial")
}

<section class="hero-screen" id="hero-screen">
    <div class="hero-slider">
        @{
            var banners = Umbraco.Content(Guid.Parse("6f96a450-18a4-4bf6-8752-73580285ce1d")).ChildrenOfType("bannerItem").Where(x => x.IsVisible());
        }
        @foreach (var banner in banners)
        {<a href="@(banner.Value<string>("btn1Link"))">
            <div class="item">

                <img src="@(banner.Value<IPublishedContent>("image")?.Url)" alt="">
                <div class="hero-slider__item-info">

                </div>
            </div>
        </a>
        }
    </div>
</section>





<section class="preview-section" id="preview-section">
    <div class="container">
        <div class="preview-section__wrapper">
            @{
                var quicknav1 = Model.Value<IEnumerable<IPublishedElement>>("quickNav");
                var quicknav2 = Model.Value<IEnumerable<IPublishedElement>>("fourthLink");
            }
            <div class="preview-section__wrapper_first">
                @if (quicknav1 != null)
                {
                    for (int i = 0; i < quicknav1.Count() && i < 3; i++)
                    {
                        <a href="/shop?req=@(quicknav1.ToArray()[i].Value<string>("link"))" class="preview-section_first__item preview-section__item" style="background-image: url(@(quicknav1.ToArray()[i].Value<IPublishedContent>("image")?.Url));">
                            <div class="preview-section__item-title_block">
                                <h3>
                                    @(quicknav1.ToArray()[i].Value("title"))
                                </h3>
                            </div>
                        </a>
                    }
                }
                else
                {

                }
            </div>
            <div class="preview-section__wrapper_second">
                @if (quicknav2 != null)
                {
                    for (int i = 0; i < quicknav2.Count() && i < 3; i++)
                    {
                        <a href="/shop?req=@(quicknav2.ToArray()[i].Value<string>("link"))" class="preview-section_second__item preview-section__item" style="background-image: url(@(quicknav2.ToArray()[i].Value<IPublishedContent>("image")?.Url));">
                            <div class="preview-section__item-title_block">
                                <h3>
                                    @(quicknav2.ToArray()[i].Value("title"))
                                </h3>
                            </div>
                        </a>
                    }
                }
                else
                {

                }
            </div>
        </div>
    </div>
</section>




<section class="hits" id="hits">
    <div class="container">

        <div class="hits-offer">
            <h2>@Model.Value("hitTitle")</h2>
            <a href="@(Model.Value<IPublishedContent>("btnLink")?.Url)" class="see-all-btn">@Model.Value("btn") <i class="fas fa-caret-right"></i></a>
        </div>

        <ul class="hits-list">
            @foreach (var t in ViewBag.Items)
            {
                var productItem = (ProductItemVM)t;


                <li class="product_element shop-item @(productItem.NotAvailable ? "out-of-stock" : string.Empty)" itemscope itemtype="http://schema.org/Product" data-id="@productItem.Id">

                    <div class="colors-block">
                        @foreach (var c in productItem.Colors.Select(cl => cl?.Value))
                        {
                            if (c != null&&c.Contains("#") )
                            {
                                <div style="background-color:@c;  border: 1px solid black;" class="colors-block__item"></div>
                            }
                            else if(c!=null)
                            {
                                <div style="background-color:@c; background-image: url('@(Url.Action("GetCamouflage", "Values", new { name = c.ToLower() }))'); border: 1px solid black;" class="colors-block__item"></div>
                            }
                        }
                    </div>

                    <div class="sizes-block">
                        @foreach (var s in productItem.Sizes.Skip(0).Take(5).Select(cl => cl.Value))
                        {
                            <div class="sizes-block__item">@s</div>
                        }
                    </div>

                    <a href="/shop/shop-item?id=@productItem.Id" itemprop="url" class="shop-item__img">
                        @if (productItem.IsRezervist)
                        {
                            <svg version="1.1" class="rez-mini-logo" height="26.91" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
                                 viewBox="0 0 26 26.9" style="enable-background:new 0 0 26 26.9;" xml:space="preserve">
                            <style type="text/css">
                                .st0 {
                                    fill: #005BBC;
                                }

                                .st1 {
                                    fill: #FFD600;
                                }
</style>
                            <g>
                            <path class="st0" d="M4.9,6c0-0.5,0.4-1,1-1h6.2c0.5,0,1-0.5,1-1V1c-0.1-0.5-0.5-1-1-1H1C0.4,0,0,0.5,0,1v12.5h4.9V6z" />



                            <path class="st0" d="M25,0h-7.8c-0.5,0-1,0.5-1,1v3c0,0.5,0.4,1,1,1h2.9c0.5,0,1,0.5,1,1v3.9c0,0.5-0.4,1-1,1h-11c-0.5,0-1,0.5-1,1
										v1.6H26V1C26,0.5,25.6,0,25,0z" />



								</g>
                            <g>
                            <path class="st1" d="M25,21.9h-7.8c-0.5,0-1,0.5-1,1v3c0,0.5,0.5,1,1,1H25c0.5,0,1-0.5,1-1v-3C26,22.4,25.6,21.9,25,21.9z" />



                            <path class="st1" d="M0,13.5v12.4c0,0.5,0.4,1,1,1h2.9c0.5,0,1-0.5,1-1V13.5H0z" />



                            <path class="st1" d="M8.1,14.9c0,0.5,0.4,1,1,1H25c0.5,0,1-0.5,1-1v-1.4H8.1V14.9z" />



								</g>
							</svg>
                        }

                        <img src="@(Url.Action("GetImmage", "Values", new { id = productItem.Id }))" loading="lazy" itemprop="image" alt="@productItem.Name">
                    </a>
                    <div class="shop-item__rate">
                        @{
                            int numb = Convert.ToInt32(Math.Floor(productItem.Rating));
                            int drob = Convert.ToInt32((productItem.Rating * 10) - (numb * 10));

                        }
                        <div class="Stars" style="--rating: @numb.@drob;" itemprop="ratingValue" aria-label="@productItem.Rating/5."></div>
                    </div>
                    <h4 class="shop-item__title" itemprop="name">
                        @productItem.Name
                    </h4>
                    <p class="shop-item__price" itemprop="price">

                        @productItem.GetCostString(Context.Request.Cookies[co.CookieCurrencyFieldName].Value ?? co.DefaultCurrency_UAH)

                    </p>
                    <div class="shop-item__btn-wrapper">

                        @if (!productItem.NotAvailable)
                        {
                            <button type="button" class="shop-item__to-cart">
                                <i class="fas fa-shopping-cart"></i>
                                @btn.Value("inBusket")
                            </button>
                        }
                        <div class="shop-item__btn-extra">


                            @if (productItem.IsInFavourites)
                            {
                                <button type="button" class="add-to-favour" style="background-color: red"><i class="fas fa-heart"></i></button>
                            }
                            else
                            {
                                <button type="button" class="add-to-favour"><i class="fas fa-heart"></i></button>
                            }

                            @if (productItem.IsInComparisons)
                            {
                                <button type="button" class="add-to-comparison" style="background-color: green"><i class="fas fa-balance-scale"></i></button>
                            }
                            else
                            {

                                <button type="button" class="add-to-comparison"><i class="fas fa-balance-scale"></i></button>
                            }
                        </div>
                    </div>
                </li>

            }
        </ul>
    </div>
</section>



<section class="new" id="new">
    <div class="container">
        <div class="hits-offer">
            <h2>@Model.Value("newTitle")</h2>
            <a href="@(Model.Value<IPublishedContent>("btnLink")?.Url)" class="see-all-btn">@Model.Value("btn") <i class="fas fa-caret-right"></i></a>
        </div>

        <ul class="new-list">

            @foreach (var n in ViewBag.NewItems)
            {
                var productItem = (ProductItemVM)n;

                <li class="product_element shop-item  @(productItem.NotAvailable ? "out-of-stock" : string.Empty)" itemscope itemtype="http://schema.org/Product" data-id="@productItem.Id">

                    <div class="colors-block">
                        @foreach (var c in productItem.Colors.Select(cl => cl.Value))
                        {
                            if (c!=null&&c.Contains("#"))
                            {
                                <div style="background-color:@c;  border: 1px solid black;" class="colors-block__item"></div>
                            }
                            else if(c!=null)
                            {
                                <div style="background-color:@c; background-image: url('@(Url.Action("GetCamouflage", "Values", new { name = c.ToLower() }))'); border: 1px solid black;" class="colors-block__item"></div>
                            }
                        }
                    </div>

                    <div class="sizes-block">

                        @foreach (var s in productItem.Sizes.Skip(0).Take(5).Select(cl => cl.Value))
                        {
                            <div class="sizes-block__item">@s</div>
                        }
                    </div>

                    <a href="/shop/shop-item?id=@productItem.Id" itemprop="url" class="shop-item__img">
                        @if (productItem.IsRezervist)
                        {
                            <svg version="1.1" class="rez-mini-logo" height="26.91" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
                                 viewBox="0 0 26 26.9" style="enable-background:new 0 0 26 26.9;" xml:space="preserve">
                            <style type="text/css">
                                .st0 {
                                    fill: #005BBC;
                                }

                                .st1 {
                                    fill: #FFD600;
                                }
</style>
                            <g>
                            <path class="st0" d="M4.9,6c0-0.5,0.4-1,1-1h6.2c0.5,0,1-0.5,1-1V1c-0.1-0.5-0.5-1-1-1H1C0.4,0,0,0.5,0,1v12.5h4.9V6z" />

                            <path class="st0" d="M25,0h-7.8c-0.5,0-1,0.5-1,1v3c0,0.5,0.4,1,1,1h2.9c0.5,0,1,0.5,1,1v3.9c0,0.5-0.4,1-1,1h-11c-0.5,0-1,0.5-1,1
														v1.6H26V1C26,0.5,25.6,0,25,0z" />

								</g>
                            <g>
                            <path class="st1" d="M25,21.9h-7.8c-0.5,0-1,0.5-1,1v3c0,0.5,0.5,1,1,1H25c0.5,0,1-0.5,1-1v-3C26,22.4,25.6,21.9,25,21.9z" />

                            <path class="st1" d="M0,13.5v12.4c0,0.5,0.4,1,1,1h2.9c0.5,0,1-0.5,1-1V13.5H0z" />

                            <path class="st1" d="M8.1,14.9c0,0.5,0.4,1,1,1H25c0.5,0,1-0.5,1-1v-1.4H8.1V14.9z" />

								</g>
							</svg>
                        }

                        <img src="@(Url.Action("GetImmage", "Values", new { id = productItem.Id }))" loading="lazy" itemprop="image" alt="@productItem.Name">
                    </a>
                    <div class="shop-item__rate">
                        @{
                            int numb = Convert.ToInt32(Math.Floor(productItem.Rating));
                            int drob = Convert.ToInt32((productItem.Rating * 10) - (numb * 10));

                        }
                        <div class="Stars" style="--rating: @numb.@drob;" itemprop="ratingValue" aria-label="@productItem.Rating/5."></div>
                    </div>
                    <h4 class="shop-item__title" itemprop="name">
                        @productItem.Name
                    </h4>
                    <p class="shop-item__price" itemprop="price">

                        @productItem.GetCostString(Context.Request.Cookies[co.CookieCurrencyFieldName].Value ?? co.DefaultCurrency_UAH)

                    </p>
                    <div class="shop-item__btn-wrapper">

                        @if (!productItem.NotAvailable)
                        {
                            <button type="button" class="shop-item__to-cart">
                                <i class="fas fa-shopping-cart"></i>
                                @btn.Value("inBusket")
                            </button>
                        }
                        <div class="shop-item__btn-extra">


                            @if (productItem.IsInFavourites)
                            {
                                <button type="button" class="add-to-favour" style="background-color: red"><i class="fas fa-heart"></i></button>
                            }
                            else
                            {
                                <button type="button" class="add-to-favour"><i class="fas fa-heart"></i></button>
                            }

                            @if (productItem.IsInComparisons)
                            {
                                <button type="button" class="add-to-comparison" style="background-color: green"><i class="fas fa-balance-scale"></i></button>
                            }
                            else
                            {

                                <button type="button" class="add-to-comparison"><i class="fas fa-balance-scale"></i></button>
                            }
                        </div>
                    </div>
                </li>
            }
        </ul>

    </div>
</section>




@*<section class="stocks" id="stocks">
        <div class="container">
            <div class="stock-slider">
                @foreach (var s in ViewBag.Stocks)
                {
                    <partial name="~/Views/Home/_StockItemPartial.cshtml.cshtml" model="s" />
                }
            </div>
        </div>
    </section>*@

<section class="last-viewed" id="last-viewed">
    <div class="container">

        <div class="hits-offer">
            <h2>@(Model.Value("lastTitle"))</h2>
        </div>
        <ul class="new-list">

            @{IEnumerable<ProductItemVM> items;}

            @if (Umbraco.MemberIsLoggedOn() && Membership.GetUser() != null)
            {
                items = ShopApiController.GetLastViewedTovars(Membership.GetUser().UserName, currentLang, Context.Request.Cookies[co.CookieCurrencyFieldName].Value);
            }
            else
            {
                string key = string.Empty;

                if (Context.Request.Cookies.Get(co.user_id) == null)
                {
                    key = Guid.NewGuid().ToString();
                    Context.Response.Cookies.Add(new HttpCookie(co.user_id, key));
                }
                else
                {
                    key = Context.Request.Cookies.Get(co.user_id).Value;
                }

                items = ShopApiController.GetLastViewedTovars(key, currentLang, Context.Request.Cookies[co.CookieCurrencyFieldName].Value);
            }

            @foreach (var i in items)
            {

                var productItem = (ProductItemVM)i;


                <li class="product_element shop-item  @(productItem.NotAvailable ? "out-of-stock" : string.Empty)" itemscope itemtype="http://schema.org/Product" data-id="@productItem.Id">

                    <div class="colors-block">
                        @foreach (var c in productItem.Colors.Select(cl => cl.Value))
                        {
                            if (c != null&&c.Contains("#"))
                            {
                                <div style="background-color:@c;  border: 1px solid black;" class="colors-block__item"></div>
                            }
                            else if(c!=null)
                            {
                                <div style="background-color:@c; background-image: url('@(Url.Action("GetCamouflage", "Values", new { name = c.ToLower() }))'); border: 1px solid black;" class="colors-block__item"></div>
                            }
                        }
                    </div>

                    <div class="sizes-block">

                        @foreach (var s in productItem.Sizes.Skip(0).Take(5).Select(cl => cl.Value))
                        {
                            <div class="sizes-block__item">@s</div>
                        }
                    </div>

                    <a href="/shop/shop-item?id=@productItem.Id" itemprop="url" class="shop-item__img">
                        @if (productItem.IsRezervist)
                        {
                            <svg version="1.1" class="rez-mini-logo" height="26.91" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
                                 viewBox="0 0 26 26.9" style="enable-background:new 0 0 26 26.9;" xml:space="preserve">
                            <style type="text/css">
                                .st0 {
                                    fill: #005BBC;
                                }

                                .st1 {
                                    fill: #FFD600;
                                }
</style>
                            <g>
                            <path class="st0" d="M4.9,6c0-0.5,0.4-1,1-1h6.2c0.5,0,1-0.5,1-1V1c-0.1-0.5-0.5-1-1-1H1C0.4,0,0,0.5,0,1v12.5h4.9V6z" />



                            <path class="st0" d="M25,0h-7.8c-0.5,0-1,0.5-1,1v3c0,0.5,0.4,1,1,1h2.9c0.5,0,1,0.5,1,1v3.9c0,0.5-0.4,1-1,1h-11c-0.5,0-1,0.5-1,1
														v1.6H26V1C26,0.5,25.6,0,25,0z" />



								</g>
                            <g>
                            <path class="st1" d="M25,21.9h-7.8c-0.5,0-1,0.5-1,1v3c0,0.5,0.5,1,1,1H25c0.5,0,1-0.5,1-1v-3C26,22.4,25.6,21.9,25,21.9z" />



                            <path class="st1" d="M0,13.5v12.4c0,0.5,0.4,1,1,1h2.9c0.5,0,1-0.5,1-1V13.5H0z" />



                            <path class="st1" d="M8.1,14.9c0,0.5,0.4,1,1,1H25c0.5,0,1-0.5,1-1v-1.4H8.1V14.9z" />



								</g>
							</svg>
                        }

                        <img src="@(Url.Action("GetImmage", "Values", new { id = productItem.Id }))" loading="lazy" itemprop="image" alt="@productItem.Name">
                    </a>
                    <div class="shop-item__rate">
                        @{
                            int numb = Convert.ToInt32(Math.Floor(productItem.Rating));
                            int drob = Convert.ToInt32((productItem.Rating * 10) - (numb * 10));

                        }
                        <div class="Stars" style="--rating: @numb.@drob;" itemprop="ratingValue" aria-label="@productItem.Rating/5."></div>
                    </div>
                    <h4 class="shop-item__title" itemprop="name">
                        @productItem.Name
                    </h4>
                    <p class="shop-item__price" itemprop="price">

                        @productItem.GetCostString(Context.Request.Cookies[co.CookieCurrencyFieldName].Value ?? co.DefaultCurrency_UAH)

                    </p>
                    <div class="shop-item__btn-wrapper">

                        @if (!productItem.NotAvailable)
                        {
                            <button type="button" class="shop-item__to-cart">
                                <i class="fas fa-shopping-cart"></i>
                                @*@localizer["InBusk"]*@ @btn.Value("inBusket")
                            </button>
                        }
                        <div class="shop-item__btn-extra">


                            @if (productItem.IsInFavourites)
                            {
                                <button type="button" class="add-to-favour" style="background-color: red"><i class="fas fa-heart"></i></button>
                            }
                            else
                            {
                                <button type="button" class="add-to-favour"><i class="fas fa-heart"></i></button>
                            }

                            @if (productItem.IsInComparisons)
                            {
                                <button type="button" class="add-to-comparison" style="background-color: green"><i class="fas fa-balance-scale"></i></button>
                            }
                            else
                            {

                                <button type="button" class="add-to-comparison"><i class="fas fa-balance-scale"></i></button>
                            }
                        </div>
                    </div>
                </li>
            }
        </ul>
    </div>
</section>